import os
import json
import re

from gsheet import GoogleSheets
from dotenv import load_dotenv

from langchain_openai import OpenAI
from langchain.agents import Tool, AgentType, initialize_agent
from langchain.memory import ConversationBufferMemory

load_dotenv()
gs = GoogleSheets()

openai_key = os.getenv("OPENAI_API_KEY")

llm = OpenAI(
    model_name="gpt-4o-mini",
    temperature=0.0,
    openai_api_key=openai_key
)

def get_asic_info(user_query: str) -> int:
    products = gs.get_products_name()
    prompt = (
        f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∞—Å–∏–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏: {products}\n"
        "–ü—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ hashmap ‚Äî <ID>: <–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏>.\n"
        "–ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±–µ—Ä–∏ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω ID –º–æ–¥–µ–ª–∏ ASIC.\n"
        f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_query}\n"
        "–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        '{"id": int}\n'
        "–ì–¥–µ –≤–º–µ—Å—Ç–æ int ‚Äî ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ù–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ."
        '–ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞—Å–∏–∫–∞ –Ω–µ—Ç, —Ç–æ –≤–µ—Ä–Ω–∏ {"id": "None"}'
    )

    llm_response = llm.invoke(prompt)

    match = re.search(r"\{.*\}", llm_response, re.DOTALL)
    if not match:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ LLM: {llm_response!r}")
    json_str = match.group(0).replace("'", '"')

    json_id = json.loads(json_str)

    if json_id['id'] == 'None':
        return "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Å–∏–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"

    product_info = gs.get_product_info(row_number=int(json_id['id']))

    return product_info

# --- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç #1: —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π ---
# products_list_tool = Tool(
#     name="products list",
#     func=lambda _: gs.get_products_name(),
#     description=(
#         "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –º–∞–π–Ω–µ—Ä–æ–≤"
#     ),
# )

# product_info_tool = Tool(
#     name="product info",
#     func= get_asic_info,
#     description=(
#         "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ —Ç–µ–∫—Å—Ç—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞—Ö–æ–¥–∏—Ç id –Ω—É–∂–Ω–æ–≥–æ ASIC,"
#         "–¥–æ—Å—Ç–∞—ë—Ç –µ–≥–æ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Google Sheets –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑ –Ω–µ—ë"
#         "–ª–∏—à—å —Ç—É —á–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é —Å–ø—Ä–∞—à–∏–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
#     ),
# )

# memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
# agent = initialize_agent(
#     tools=[products_list_tool, product_info_tool],
#     llm=llm,
#     agent=AgentType.CONVERSATIONAL_REACT_DESCRIPTION,
#     memory=memory,
#     verbose=True,
# )

print(get_asic_info("—É –≤–∞—Å –µ—Å—Ç—å –≤–æ—Ç—Å–º–∞–π–Ω–µ—Ä m50s?"))

#while True:
    # user = input("\n–í—ã: ")
    # if user.lower() in {"exit", "quit"}: break
    # print("ü§ñ:", agent.invoke({"input": user})["output"])